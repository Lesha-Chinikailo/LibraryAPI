version: '3.8'
services:
  postgres:
    image: postgres:17 # 13

    container_name: postgres
    environment:
      POSTGRES_USER: postgresUsername
      POSTGRES_PASSWORD: postgresPassword
      POSTGRES_DB: book_service_database
      PGDATA: /data/postgres
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgresUsername -d book_service_database'"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres:/data/postgres
      - init.sql:/docker-entrypoint-initdb.d/init.sql
    depends_on:
      - config-service
    restart: unless-stopped
    networks:
      my_network:


  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: postgres
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5051:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      my_network:

  config-service:
    container_name: config-service
    build: config-service
    ports:
      - 8001:8001
    networks:
      my_network:
    healthcheck:
      test: ["CMD", "curl", "-u", "user:admin", "http://config-service:8001/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  registry:
    container_name: registry
    restart: always
    build: registry
    ports:
      - 8761:8761
    depends_on:
      config-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "http://registry:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      my_network:


  gateway:
    container_name: gateway
    restart: always
    build: gateway
    ports:
      - 8989:8989
    depends_on:
      - config-service
      - registry
    networks:
      my_network:

  book-service:
    container_name: book-service
    restart: on-failure
    build: book-service
    ports:
      - 8081:8081
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/book_service_database
      SPRING_DATASOURCE_USERNAME: postgresUsername
      SPRING_DATASOURCE_PASSWORD: postgresPassword
    depends_on:
      postgres:
        condition: service_healthy
      config-service:
        condition: service_healthy
      registry:
        condition: service_healthy
      gateway:
        condition: service_started
    networks:
      my_network:

  library-service:
    container_name: library-service
    restart: on-failure
    build: library-service
    ports:
      - 8082:8082
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_bookLibrary:5432/book_library
      SPRING_DATASOURCE_USERNAME: postgresUsername
      SPRING_DATASOURCE_PASSWORD: postgresPassword
#      SPRING_JPA_HIBERNATE_DDL_AUTO: create
    depends_on:
      config-service:
        condition: service_healthy
      registry:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      my_network:

volumes:
  postgres:
  pgadmin-data:

networks:
  my_network:
    driver: bridge